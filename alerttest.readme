The alertTester script allows one to test whether your BBOalert rules
produce the alert text that you expect.  You specify a bidding context
(i.e., bidding history) and a new bid and the script will figure out
what alert text would be generated for the combination of that context
and that bid.

When you add new rules to BBOalert, you often want to check for their
correctness, especially when the rules involve using a script or a
regular expression.  This script helps with that and avoids having to
start a teaching table and manually enter bidding sequences there.  In
addition, it allows tests to be repeated easily.

The testing can be done as in this example which runs 3 Drury-related
tests (The third test line below checks that 2C after third-seat 1D
does NOT cause an alert.):

Script,onDataLoad
let tests = `
T, ----1H--,   2C, limit raise in !H
T, ------1S--, 2C, limit raise in !S
T, ----1D--,   2C, 
`;
ALERTTESTER.runTests(tests);
Script

ALERTTESTER.runTests takes a string consisting of multiple test lines.
(In javascript, surrounding text with backquotes as above is one way to
declare multi-line strings.)

Each test line consists of a comma separated list similar to the ones
used to specify BBOalert patterns.  The test line consists of

     <testmarker>,<context>,<call>,<explanation>

<testmarker>
   Always T.  Used just so these lines don't get interpreted as normal
   BBOalert data lines.

<context>, <call>, <explanation>
   These have similar meanings to the normal BBOalert data lines, but
   each field must explicitly state a single string.  Wildcards,
   regular expressions or script calls are not allowed.

<context> can be blank meaning the <call> is the opening bid.

<explanation> can be blank, meaning that no alert is generated.

Any field can be '+' to mean reuse the corresponding field from the
previous test line.

runTests produces a summary line of successes and failures in the
BBOalert log area.  If there are failures, the details of each failure
can be seen by using the "Export Log" button and looking at what is in
the clipboard or by looking at the console.log in the browser tools
(Ctrl-Shift-J on Chrome).

The script example above automatically runs the tests each time BBO
starts up or when a new set of BBOalert data is imported.  This is
useful to confirm that things are still working as expected.
Alternatively, the runTests call could be wrapped in its own %Script%
name and run manually from a button or shortcut.

